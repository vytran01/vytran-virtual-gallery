)
) %>%
layout(title = 'Total goals of 20 Teams in EPL season 2023/24',
xaxis = list(title = 'Team'),
yaxis = list(title = 'Number of Goals'))
plot_ly(df_team, x = ~SoT, y = ~Gls, text = ~paste("Team: ", Team, "<br>Shots on Target: ", SoT, "<br>Goals: ", Gls), hoverinfo = "text") %>%
add_markers(marker = list(color = ~Sh, size = 10, opacity = 0.8)) %>%
add_lines(x = ~SoT, y = ~fitted(lm(Gls ~ SoT, data = df_team)), line = list(color = "black", width = 1), showlegend = FALSE) %>%
layout(title = "Scatterplot of Shots on Target vs Total Goals for 20 Teams",
xaxis = list(title = "Shots on Target"),
yaxis = list(title = "Goals"))
plot_ly(df_team, x = ~SoT, y = ~Gls, text = ~paste("Team: ", Team, "<br>Shots on Target: ", SoT, "<br>Goals: ", Gls), hoverinfo = "text") %>%
add_markers(marker = list(color = ~Sh, size = 10, opacity = 0.8)) %>%
add_lines(x = ~SoT, y = ~fitted(lm(Gls ~ SoT, data = df_team)), line = list(color = "black", width = 1), showlegend = TRUE) %>%
layout(title = "Scatterplot of Shots on Target vs Total Goals for 20 Teams",
xaxis = list(title = "Shots on Target"),
yaxis = list(title = "Goals"))
plot_ly(df_team, x = ~SoT, y = ~Gls, text = ~paste("Team: ", Team, "<br>Shots on Target: ", SoT, "<br>Goals: ", Gls), hoverinfo = "text") %>%
add_markers(marker = list(color = ~Sh, size = 10, opacity = 0.8)) %>%
add_lines(x = ~SoT, y = ~fitted(lm(Gls ~ SoT, data = df_team)), line = list(color = "black", width = 1), showlegend = FALSE) %>%
layout(title = "Scatterplot of Shots on Target vs Total Goals for 20 Teams",
xaxis = list(title = "Shots on Target"),
yaxis = list(title = "Goals"))
library(plotly)
plot_ly(df_team, x = ~SoT, y = ~Gls,
text = ~paste("Team: ", Team, "<br>Shots on Target: ", SoT, "<br>Goals: ", Gls),
hoverinfo = "text") %>%
add_markers(marker = list(color = ~Sh, colorscale = "Viridis", size = 10, opacity = 0.8)) %>%
add_lines(x = ~SoT, y = ~fitted(lm(Gls ~ SoT, data = df_team)), line = list(color = "black", width = 1), showlegend = FALSE) %>%
layout(title = "Scatterplot of Shots on Target vs Total Goals for 20 Teams",
xaxis = list(title = "Shots on Target"),
yaxis = list(title = "Goals"),
colorbar = list(title = "Number of Shots"))
library(plotly)
# Define the gradient colors
gradient_colors <- brewer.pal(9, "Blues")
library(plotly)
plot_ly(df_team, x = ~SoT, y = ~Gls,
text = ~paste("Team: ", Team, "<br>Shots on Target: ", SoT, "<br>Goals: ", Gls),
hoverinfo = "text") %>%
add_markers(marker = list(color = ~Sh, colorscale = "Viridis", size = 10, opacity = 0.8)) %>%
add_lines(x = ~SoT, y = ~fitted(lm(Gls ~ SoT, data = df_team)), line = list(color = "black", width = 1), showlegend = FALSE) %>%
layout(title = "Scatterplot of Shots on Target vs Total Goals for 20 Teams",
xaxis = list(title = "Shots on Target"),
yaxis = list(title = "Goals"),
colorbar = list(title = "Number of Shots"))
library(ggplot2)
library(gridExtra)
# Group the data by team and player, and count the number of goals each player contributes to each team
goals_contribution <- aggregate(Gls ~ Team + Player, data = df_with_goals, FUN = sum)
goals_contribution <- goals_contribution[order(goals_contribution$Team, -goals_contribution$Gls), ]
# Create a list to store pie charts for each team
plot_list <- list()
# Create a pie chart for each team and add it to the plot list
for(team in unique(goals_contribution$Team)) {
# Subset the data for the current team
team_data <- subset(goals_contribution, Team == team)
top_players <- head(team_data, 5)
other_goals <- sum(team_data$Gls) - sum(top_players$Gls)
other_data <- data.frame(Team = team, Player = "Other", Gls = other_goals)
pie_data <- rbind(top_players, other_data)
# Create the pie chart
pie_chart <- ggplot(pie_data, aes(x = "", y = Gls, fill = Player)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round((Gls / sum(pie_data$Gls)) * 100), "%")),
position = position_stack(vjust = 0.5), size = 4) +
coord_polar("y", start = 0) +
labs(fill = "Player") +
theme_void()
# Add the pie chart to the plot list
plot_list[[team]] <- pie_chart
}
# Display the pie charts for each team
for(i in seq_along(plot_list)) {
print(plot_list[[i]])
}
library(plotly)
# Group the data by team and player, and count the number of goals each player contributes to each team
goals_contribution <- aggregate(Gls ~ Team + Player, data = df_with_goals, FUN = sum)
goals_contribution <- goals_contribution[order(goals_contribution$Team, -goals_contribution$Gls), ]
# Create a list to store pie charts for each team
plot_list <- list()
# Create a pie chart for each team and add it to the plot list
for(team in unique(goals_contribution$Team)) {
# Subset the data for the current team
team_data <- subset(goals_contribution, Team == team)
top_players <- head(team_data, 5)
other_goals <- sum(team_data$Gls) - sum(top_players$Gls)
other_data <- data.frame(Team = team, Player = "Other", Gls = other_goals)
pie_data <- rbind(top_players, other_data)
# Create the pie chart
pie_chart <- plot_ly(pie_data, labels = ~Player, values = ~Gls, type = "pie", textinfo = "label+percent", marker = list(colors = rainbow(length(unique(pie_data$Player))))) %>%
layout(title = paste("Pie chart for", team))
# Add the pie chart to the plot list
plot_list[[team]] <- pie_chart
}
# Define dropdown menu options
dropdown_options <- list(
list(
method = "update",
args = list(list(visible = rep(FALSE, length(plot_list))),
list(title = "Please select a team", showlegend = FALSE)),
label = "Please select a team"
)
)
# Add dropdown menu options for each team
for (team_name in names(plot_list)) {
dropdown_options[[length(dropdown_options) + 1]] <- list(
method = "update",
args = list(list(visible = c(rep(FALSE, which(names(plot_list) != team_name)), TRUE)),
list(title = paste("Pie chart for", team_name), showlegend = FALSE)),
label = team_name
)
}
library(plotly)
# Group the data by team and player, and count the number of goals each player contributes to each team
goals_contribution <- aggregate(Gls ~ Team + Player, data = df_with_goals, FUN = sum)
goals_contribution <- goals_contribution[order(goals_contribution$Team, -goals_contribution$Gls), ]
# Create a list to store pie charts for each team
plot_list <- list()
# Create a pie chart for each team and add it to the plot list
for(team in unique(goals_contribution$Team)) {
# Subset the data for the current team
team_data <- subset(goals_contribution, Team == team)
top_players <- head(team_data, 5)
other_goals <- sum(team_data$Gls) - sum(top_players$Gls)
other_data <- data.frame(Team = team, Player = "Other", Gls = other_goals)
pie_data <- rbind(top_players, other_data)
# Create the pie chart
pie_chart <- plot_ly(pie_data, labels = ~Player, values = ~Gls, type = "pie", textinfo = "label+percent", marker = list(colors = rainbow(length(unique(pie_data$Player))))) %>%
layout(title = paste("Pie chart for", team))
# Add the pie chart to the plot list
plot_list[[team]] <- pie_chart
}
# Define dropdown menu options
dropdown_options <- list(
list(
method = "update",
args = list(list(visible = rep(FALSE, length(plot_list))),
list(title = "Please select a team", showlegend = FALSE)),
label = "Please select a team"
)
)
# Add dropdown menu options for each team
for (team_name in names(plot_list)) {
visible_list <- rep(FALSE, length(plot_list))
visible_list[names(plot_list) == team_name] <- TRUE
dropdown_options[[length(dropdown_options) + 1]] <- list(
method = "update",
args = list(list(visible = visible_list),
list(title = paste("Pie chart for", team_name), showlegend = FALSE)),
label = team_name
)
}
# Add dropdown menu to the layout
layout_options <- list(updatemenus = list(
list(
y = 1.2,
buttons = dropdown_options
)
))
# Create subplot with dropdown menu
subplot(plot_list, shareX = TRUE, shareY = TRUE) %>%
layout(layout_options)
# Group the data by team and player, and count the number of goals each player contributes to each team
goals_contribution <- aggregate(Gls ~ Team + Player, data = df_with_goals, FUN = sum)
goals_contribution <- goals_contribution[order(goals_contribution$Team, -goals_contribution$Gls), ]
plot_list <- list()
# Create a pie chart for each team
for(team in unique(goals_contribution$Team)) {
# Subset the data for the current team
team_data <- subset(goals_contribution, Team == team)
top_players <- head(team_data, 5)
other_goals <- sum(team_data$Gls) - sum(top_players$Gls)
other_data <- data.frame(Team = team, Player = "Other", Gls = other_goals)
pie_data <- rbind(top_players, other_data)
# Create the pie chart
pie_data <- rbind(top_players, other_data)
# Create the pie chart
pie_chart <- ggplot(pie_data, aes(x = "", y = Gls, fill = Player)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round((Gls / sum(pie_data$Gls)) * 100), "%")),
position = position_stack(vjust = 0.5), size = 4) +
coord_polar("y", start = 0) +
labs(fill = "Player") +
theme_void()
plot_list[[team]] <- pie_chart
}
for(i in seq_along(plot_list)) {
print(plot_list[[i]])
}
library(ggplot2)
library(plotly)
# Group the data by team and player, and count the number of goals each player contributes to each team
goals_contribution <- aggregate(Gls ~ Team + Player, data = df_with_goals, FUN = sum)
goals_contribution <- goals_contribution[order(goals_contribution$Team, -goals_contribution$Gls), ]
plot_list <- list()
# Create a pie chart for each team
for(team in unique(goals_contribution$Team)) {
# Subset the data for the current team
team_data <- subset(goals_contribution, Team == team)
top_players <- head(team_data, 5)
other_goals <- sum(team_data$Gls) - sum(top_players$Gls)
other_data <- data.frame(Team = team, Player = "Other", Gls = other_goals)
pie_data <- rbind(top_players, other_data)
# Create the pie chart using ggplot
pie_chart <- ggplot(pie_data, aes(x = "", y = Gls, fill = Player)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round((Gls / sum(pie_data$Gls)) * 100), "%")),
position = position_stack(vjust = 0.5), size = 4) +
coord_polar("y", start = 0) +
labs(fill = "Player") +
theme_void() +
ggtitle(paste("Pie chart for", team))  # Add team name to the title
# Convert ggplot object to plotly
plotly_chart <- ggplotly(pie_chart)
plot_list[[team]] <- plotly_chart
}
library(ggplot2)
library(plotly)
# Group the data by team and player, and count the number of goals each player contributes to each team
goals_contribution <- aggregate(Gls ~ Team + Player, data = df_with_goals, FUN = sum)
goals_contribution <- goals_contribution[order(goals_contribution$Team, -goals_contribution$Gls), ]
plot_list <- list()
# Create a pie chart for each team
for(team in unique(goals_contribution$Team)) {
# Subset the data for the current team
team_data <- subset(goals_contribution, Team == team)
top_players <- head(team_data, 5)
other_goals <- sum(team_data$Gls) - sum(top_players$Gls)
other_data <- data.frame(Team = team, Player = "Other", Gls = other_goals)
pie_data <- rbind(top_players, other_data)
# Create the pie chart using ggplot
pie_chart <- ggplot(pie_data, aes(x = "", y = Gls, fill = Player)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round((Gls / sum(pie_data$Gls)) * 100), "%")),
position = position_stack(vjust = 0.5), size = 4) +
coord_polar("y", start = 0) +
labs(fill = "Player") +
theme_void() +
ggtitle(paste("Pie chart for", team))  # Add team name to the title
# Convert ggplot object to plotly
plotly_chart <- ggplotly(pie_chart)
plot_list[[team]] <- plotly_chart
}
library(ggplot2)
# Group the data by team and player, and count the number of goals each player contributes to each team
goals_contribution <- aggregate(Gls ~ Team + Player, data = df_with_goals, FUN = sum)
goals_contribution <- goals_contribution[order(goals_contribution$Team, -goals_contribution$Gls), ]
plot_list <- list()
# Create a pie chart for each team
for(team in unique(goals_contribution$Team)) {
# Subset the data for the current team
team_data <- subset(goals_contribution, Team == team)
top_players <- head(team_data, 5)
other_goals <- sum(team_data$Gls) - sum(top_players$Gls)
other_data <- data.frame(Team = team, Player = "Other", Gls = other_goals)
pie_data <- rbind(top_players, other_data)
# Create the pie chart
pie_chart <- ggplot(pie_data, aes(x = "", y = Gls, fill = Player)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round((Gls / sum(pie_data$Gls)) * 100), "%")),
position = position_stack(vjust = 0.5), size = 4) +
coord_polar("y", start = 0) +
labs(fill = "Player") +
ggtitle(team) +  # Add title based on team name
theme_void()
plot_list[[team]] <- pie_chart
}
# Print the pie charts with titles
for(i in seq_along(plot_list)) {
print(plot_list[[i]])
}
library(ggplot2)
# Group the data by team and player, and count the number of goals each player contributes to each team
goals_contribution <- aggregate(Gls ~ Team + Player, data = df_with_goals, FUN = sum)
goals_contribution <- goals_contribution[order(goals_contribution$Team, -goals_contribution$Gls), ]
plot_list <- list()
# Create a pie chart for each team
for(team in unique(goals_contribution$Team)) {
# Subset the data for the current team
team_data <- subset(goals_contribution, Team == team)
top_players <- head(team_data, 5)
other_goals <- sum(team_data$Gls) - sum(top_players$Gls)
other_data <- data.frame(Team = team, Player = "Other", Gls = other_goals)
pie_data <- rbind(top_players, other_data)
# Create the pie chart
pie_chart <- ggplot(pie_data, aes(x = "", y = Gls, fill = Player)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round((Gls / sum(pie_data$Gls)) * 100), "%")),
position = position_stack(vjust = 0.5), size = 4) +
coord_polar("y", start = 0) +
labs(fill = "Player") +
ggtitle(paste("Pie chart showing goal contribution of", team, "players")) +
theme_void()
plot_list[[team]] <- pie_chart
}
# Print the pie charts with titles
for(i in seq_along(plot_list)) {
print(plot_list[[i]])
}
library(ggplot2)
# Group the data by team and player, and count the number of goals each player contributes to each team
goals_contribution <- aggregate(Gls ~ Team + Player, data = df_with_goals, FUN = sum)
goals_contribution <- goals_contribution[order(goals_contribution$Team, -goals_contribution$Gls), ]
plot_list <- list()
# Create a pie chart for each team
for(team in unique(goals_contribution$Team)) {
# Subset the data for the current team
team_data <- subset(goals_contribution, Team == team)
top_players <- head(team_data, 5)
other_goals <- sum(team_data$Gls) - sum(top_players$Gls)
other_data <- data.frame(Team = team, Player = "Other", Gls = other_goals)
pie_data <- rbind(top_players, other_data)
# Create the pie chart
pie_chart <- ggplot(pie_data, aes(x = "", y = Gls, fill = Player)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round((Gls / sum(pie_data$Gls)) * 100), "%")),
position = position_stack(vjust = 0.5), size = 4) +
coord_polar("y", start = 0) +
labs(fill = "Player") +
ggtitle(paste("Pie chart showing goal contribution of", team, "players")) +
theme_void()
plot_list[[team]] <- pie_chart
}
# Print the pie charts with titles
for(i in seq_along(plot_list)) {
print(plot_list[[i]])
}
grid.arrange(plot_list[[0]], plot_list[[1]], ncol=2)
plot_list
grid.arrange(plot_list[[0]], plot_list[[1]], ncol=2)
grid.arrange(plot_list[0], plot_list[1], ncol=2)
grid.arrange(plot_list[[1]], plot_list[[2]], ncol=2)
library(ggplot2)
# Group the data by team and player, and count the number of goals each player contributes to each team
goals_contribution <- aggregate(Gls ~ Team + Player, data = df_with_goals, FUN = sum)
goals_contribution <- goals_contribution[order(goals_contribution$Team, -goals_contribution$Gls), ]
plot_list <- list()
# Create a pie chart for each team
for(team in unique(goals_contribution$Team)) {
# Subset the data for the current team
team_data <- subset(goals_contribution, Team == team)
top_players <- head(team_data, 5)
other_goals <- sum(team_data$Gls) - sum(top_players$Gls)
other_data <- data.frame(Team = team, Player = "Other", Gls = other_goals)
pie_data <- rbind(top_players, other_data)
# Create the pie chart
pie_chart <- ggplot(pie_data, aes(x = "", y = Gls, fill = Player)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round((Gls / sum(pie_data$Gls)) * 100), "%")),
position = position_stack(vjust = 0.5), size = 4) +
coord_polar("y", start = 0) +
labs(fill = "Player") +
ggtitle(paste("Goal contribution of", team, "players")) +
theme_void()
plot_list[[team]] <- pie_chart
}
# Print the pie charts with titles
for(i in seq_along(plot_list)) {
print(plot_list[[i]])
}
grid.arrange(plot_list[[1]], plot_list[[2]], ncol=2)
grid.arrange(plot_list[[1]], plot_list[[13]], ncol=2)
grid.arrange(plot_list[[14]], plot_list[[17]], ncol=2)
library(ggplot2)
# Group the data by team and player, and count the number of goals each player contributes to each team
goals_contribution <- aggregate(Gls ~ Team + Player, data = df_with_goals, FUN = sum)
goals_contribution <- goals_contribution[order(goals_contribution$Team, -goals_contribution$Gls), ]
plot_list <- list()
# Create a pie chart for each team
for(team in unique(goals_contribution$Team)) {
# Subset the data for the current team
team_data <- subset(goals_contribution, Team == team)
top_players <- head(team_data, 5)
other_goals <- sum(team_data$Gls) - sum(top_players$Gls)
other_data <- data.frame(Team = team, Player = "Other", Gls = other_goals)
pie_data <- rbind(top_players, other_data)
# Create the pie chart
pie_chart <- ggplot(pie_data, aes(x = "", y = Gls, fill = Player)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round((Gls / sum(pie_data$Gls)) * 100), "%")),
position = position_stack(vjust = 0.5), size = 4) +
coord_polar("y", start = 0) +
labs(fill = "Player") +
ggtitle(paste("Goal contribution of", team, "players")) +
theme_void()
plot_list[[team]] <- pie_chart
}
top_players
df_with_goals <- df[df$Gls >= 1, ]
# Group the data by team and player, and summarize to get the player with the most goals for each team
top_players <- df_with_goals %>%
group_by(Team) %>%
slice(which.max(Gls)) %>%
ungroup()
top_players
top_players = top_players %>% arrange(Gls)
ggradar(top_players[c(1,6,20),c(1,7,8,9,18,19)],
grid.min = 0,
grid.mid=0.75,
grid.max = 1.5,
plot.title = "Attacking metrics of \nthe top goal scorers\n from 3 teams",
base.size= 1,
font.radar = "mono",
group.point.size = 2,
)
top_players = top_players %>% arrange(Gls)
top_players
top_players = top_players %>% arrange(Gls)
ggradar(top_players[c(1,6,20),c(1,7,8,9,18,19)],
grid.min = 0,
grid.mid=0.75,
grid.max = 1.5,
plot.title = "Attacking metrics of \nthe top goal scorers\n from 3 teams",
base.size= 1,
font.radar = "mono",
group.point.size = 2,
)
library(plotly)
# Aggregate data
g_xg_team <- aggregate(G.xG ~ Team, df, sum, na.rm = TRUE)
# Create bar chart
p <- ggplot(g_xg_team) +
geom_col(aes(x = Team, y = G.xG, fill = Team)) +
geom_text(aes(x = Team, y = G.xG, label = round(G.xG, 2)), vjust = 0) +
ggtitle('The difference between the Actual Goals and Expected Goals for Each Team') +
theme_bw() +
theme(legend.position = 'none',
axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ggplot to plotly
p <- ggplotly(p, tooltip = c("Team", "G.xG"))
p
library(plotly)
# Aggregate data
g_xg_team <- aggregate(G.xG ~ Team, df, sum, na.rm = TRUE)
# Create bar chart
p <- ggplot(g_xg_team) +
geom_col(aes(x = Team, y = G.xG, fill = Team)) +
geom_text(aes(x = Team, y = G.xG, label = round(G.xG, 2)), vjust = 0) +
ggtitle('The difference between the Actual Goals and Expected Goals for Each Team') +
theme_bw() +
theme(legend.position = 'none',
axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ggplot to plotly
p <- ggplotly(p, tooltip = c("Team", "G.xG"))
# Set y-axis label
p <- layout(p, yaxis = list(title = "Goals"))
p
library(plotly)
# Aggregate data
g_xg_team <- aggregate(G.xG ~ Team, df, sum, na.rm = TRUE)
# Create bar chart
p <- ggplot(g_xg_team) +
geom_col(aes(x = Team, y = G.xG, fill = Team)) +
geom_text(aes(x = Team, y = G.xG, label = round(G.xG, 2)), vjust = 0) +
ggtitle('The difference between the Actual Goals and Expected Goals for Each Team') +
theme_bw() +
theme(legend.position = 'none',
axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ggplot to plotly
p <- ggplotly(p, tooltip = c("Team", "G.xG"))
# Set y-axis label
p <- layout(p, yaxis = list(title = "Actual Goals - Expected Goals"))
p
library(plotly)
# Aggregate data
g_xg_team <- aggregate(G.xG ~ Team, df, sum, na.rm = TRUE)
# Create text for hover card
hover_text <- paste("Team: ", g_xg_team$Team, "<br>",
"Expected Goals: ", round(g_xg_team$G.xG, 2), "<br>",
"Actual Goals: ", round(g_xg_team$G.xG, 2))
# Create bar chart
p <- ggplot(g_xg_team, aes(x = Team, y = G.xG, fill = Team, text = hover_text)) +
geom_col() +
geom_text(aes(label = round(G.xG, 2)), vjust = 0) +
ggtitle('The difference between the Actual Goals and Expected Goals for Each Team') +
theme_bw() +
theme(legend.position = 'none',
axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ggplot to plotly
p <- ggplotly(p)
# Set y-axis label
p <- layout(p, yaxis = list(title = "Goals"))
p
g_xg_team
team_df
df_team
library(plotly)
# Aggregate data
g_xg_team <- aggregate(G.xG ~ Team, df, sum, na.rm = TRUE)
# Create bar chart
p <- ggplot(g_xg_team) +
geom_col(aes(x = Team, y = G.xG, fill = Team)) +
geom_text(aes(x = Team, y = G.xG, label = round(G.xG, 2)), vjust = 0) +
ggtitle('The difference between the Actual Goals and Expected Goals for Each Team') +
theme_bw() +
theme(legend.position = 'none',
axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ggplot to plotly
p <- ggplotly(p, tooltip = c("Team", "G.xG"))
# Set y-axis label
p <- layout(p, yaxis = list(title = "Actual Goals - Expected Goals"))
p
file.create(".nojekyll")
file.create(".nojekyll")
knitr::opts_chunk$set(echo = FALSE)
# Learn more about creating websites with Distill at:
# https://rstudio.github.io/distill/website.html
# Learn more about publishing to GitHub Pages at:
# https://rstudio.github.io/distill/publish_website.html#github-pages
file.create(".nojekyll")
