geom_smooth(method = "lm", se = FALSE) +
geom_text_repel(aes(label = Team), size = 3)
labs(x = "Shots on Target", y = "Goals") +
theme_minimal()
df_team %>% arrange(Gls)
quartiles <- quantile(df_team$Gls, probs = c(0.25, 0.5, 0.75))
# Define labels for the categories
labels <- c("very low", "low", "medium", "high")
# Create a new column 'goals_level' based on quartiles
df_team$goals_level <- cut(df_team$Gls,
breaks = c(-Inf, quartiles, Inf),
labels = labels,
right = FALSE)
df_three_teams = df[(Team == 'Sheffield Utd' | Team == 'Manchester Utd' | Team == 'Arsenal'), ]
# Difference between expected goals and actual goals of each team
g_xg_team <- aggregate(G.xG ~ Team, df, sum, na.rm = TRUE)
ggplot(g_xg_team) +
geom_col(aes(x= Team, y = G.xG , fill = Team))+
geom_text(aes(x=Team , y= G.xG, label= round(G.xG,2)), vjust=0) +
ggtitle('The difference between the Actual Goals and Expected Goals') +
theme_bw() +
theme(legend.position = 'none',
axis.text.x = element_text(angle = 90, hjust=1),
)
df_star_players = df[Gls >= 5,]
star_players_table <- table(df_star_players$Team)
star_players_by_team <- as.data.frame(star_players_table)
names(star_players_by_team)[1] <- "Team"
names(star_players_by_team)[2] <- "NumPlayers"
star_players_by_team <- subset(star_players_by_team, NumPlayers > 0)
ggplot(star_players_by_team, aes(label = Team, size = NumPlayers, color = NumPlayers)) +
geom_text_wordcloud() +
scale_size_area(max_size = 8)  +
theme_minimal() +
scale_color_gradient(low="powderblue", high="darkblue")
df_with_goals <- df[df$Gls >= 1, ]
# Group the data by team and player, and summarize to get the player with the most goals for each team
top_players <- df_with_goals %>%
group_by(Team) %>%
slice(which.max(Gls)) %>%
ungroup()
top_players = top_players %>% arrange(Gls)
ggradar(top_players[c(1,11,20),c(1,6,8,9,18,19)],
grid.min = 0,
grid.mid=0.75,
grid.max = 1.5,
plot.title = "Amazing MVP Seasons",
base.size= 1,
font.radar = "mono")
ggplot(df_team) +
geom_col(aes(x=Team , y= Gls, fill = Team)) +
geom_text(aes(x=Team , y= Gls, label= Gls), vjust=0, size = 3) +
labs(x = "Team", y = "Number of Goals",
title = 'Total number of goals for each team') +
theme_bw() +
theme(legend.position = 'none',
axis.text.x = element_text( angle = 45, hjust=1),
)
df_three_teams = df[(Team == 'Sheffield Utd' | Team == 'Manchester Utd' | Team == 'Arsenal'), ]
Team
attach(df)
Team
df_three_teams = df[(Team == 'Sheffield Utd' | Team == 'Manchester Utd' | Team == 'Arsenal'), ]
df_three_teams
base_size = 1
ggplot(df_three_teams, aes(xG, Gls, colour = Team)) +
geom_point(size = 0.5) +
geom_xsideboxplot(aes(y =Gls), orientation = "y", size= 0.2 ) +
scale_xsidey_discrete() +
geom_ysidehistogram(bins=10000, position = 'stack', alpha = 0.2 ) +
scale_ysidex_continuous(guide = guide_axis(angle = 90), minor_breaks = NULL) +
theme(ggside.panel.background = element_rect(fill = "antiquewhite1", colour = "red"))+
theme(text=element_text(size=10)) +
ggtitle("Diamond Carat Value versus Price")
library(dplyr)
library(ggplot2)
library(ggwordcloud)
library(ggcorrplot)
library(reshape2)
library(shiny)
library(gridExtra)
library(scales)
library(ggrepel)
library(ggradar)
library(magrittr)
library(dplyr)
library(ggside)
install.packages("ggside")
library(dplyr)
library(ggplot2)
library(ggwordcloud)
library(ggcorrplot)
library(reshape2)
library(shiny)
library(gridExtra)
library(scales)
library(ggrepel)
library(ggradar)
library(magrittr)
library(dplyr)
library(ggside)
base_size = 1
ggplot(df_three_teams, aes(xG, Gls, colour = Team)) +
geom_point(size = 0.5) +
geom_xsideboxplot(aes(y =Gls), orientation = "y", size= 0.2 ) +
scale_xsidey_discrete() +
geom_ysidehistogram(bins=10000, position = 'stack', alpha = 0.2 ) +
scale_ysidex_continuous(guide = guide_axis(angle = 90), minor_breaks = NULL) +
theme(ggside.panel.background = element_rect(fill = "antiquewhite1", colour = "red"))+
theme(text=element_text(size=10)) +
ggtitle("Diamond Carat Value versus Price")
base_size = 1
ggplot(df_three_teams, aes(xG, Gls, colour = Team)) +
geom_point(size = 0.5) +
geom_xsideboxplot(aes(y =Gls), orientation = "y", size= 0.2 ) +
scale_xsidey_discrete() +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.background = element_rect(fill = "antiquewhite1", colour = "red"))+
theme(text=element_text(size=10)) +
ggtitle("Diamond Carat Value versus Price")
df[Team == "Arsenal",]
ggplot(df, aes(x = Gls)) +
geom_density(fill = "skyblue", color = "blue") +
labs(title = "Density Plot of Goals Scored",
x = "Goals Scored",
y = "Density") +
theme_minimal()
sum(Gls == 0)
ggplot(df_with_goals, aes(x = Gls)) +
geom_density(fill = "skyblue", color = "blue") +
labs(title = "Density Plot of Goals Scored",
x = "Goals Scored",
y = "Density") +
theme_minimal()
df_numeric
df_numeric <- na.omit(df[sapply(df, is.numeric)])
corr = cor(df_numeric)
ggcorrplot(corr,
hc.order = TRUE,
#type = "upper",
colors = c("navyblue", "white", "red"),
outline.color = "black",
ggtheme = ggplot2::theme_minimal(),
)
ggplot(df, aes(x = xG, y = Gls)) +
geom_point(shape = 21, color = "black", size = 3) +  # Using filled circles
geom_smooth(method = "lm", se = FALSE) +  # Add a line of best fit
labs(x = "Expected Goals", y = "Goals") +  # Set axis labels
theme_minimal()  # Set theme
ggplot(df, aes(x = xG, y = Gls)) +
geom_point(shape = 21, color = "black", size = 2) +  # Using filled circles
geom_smooth(method = "lm", se = FALSE) +  # Add a line of best fit
labs(x = "Expected Goals", y = "Goals") +  # Set axis labels
theme_minimal()  # Set theme
ggplot(df, aes(x = xG, y = Gls)) +
geom_point(color = "black", size = 2) +  # Using filled circles
geom_smooth(method = "lm", se = FALSE) +  # Add a line of best fit
labs(x = "Expected Goals", y = "Goals") +  # Set axis labels
theme_minimal()  # Set theme
ggplot(df, aes(x = xG, y = Gls, color = npxG)) +
geom_point(shape = 21, color = "black", size = 3) +  # Using filled circles
geom_smooth(method = "lm", se = FALSE) +  # Add a line of best fit
labs(x = "Expected", y = "Goals") +  # Set axis labels
scale_fill_gradient(name = "Shots", low = "blue", high = "red") +  # Set color gradient
theme_minimal()  # Set theme
ggplot(df, aes(x = xG, y = Gls, fill = npxG)) +
geom_point(shape = 21, color = "black", size = 3) +  # Using filled circles
geom_smooth(method = "lm", se = FALSE) +  # Add a line of best fit
labs(x = "Expected Goals", y = "Goals") +  # Set axis labels
scale_fill_gradient(name = "Non-penalty Expected Goals", low = "blue", high = "red") +  # Set color gradient
theme_minimal()  # Set theme
ggplot(df, aes(x = xG, y = Gls, fill = npxG)) +
geom_point(shape = 21, color = "black", size = 2) +  # Using filled circles
geom_smooth(method = "lm", se = FALSE) +  # Add a line of best fit
labs(x = "Expected Goals", y = "Goals") +  # Set axis labels
scale_fill_gradient(name = "Non-penalty Expected Goals", low = "blue", high = "red") +  # Set color gradient
theme_minimal()  # Set theme
base_size = 1
ggplot(df_three_teams, aes(xG, Gls, colour = Team)) +
geom_point(size = 0.5) +
geom_xsideboxplot(aes(y =Gls), orientation = "y", size= 0.2 ) +
scale_xsidey_discrete() +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.background = element_rect(fill = "antiquewhite1", colour = "red"))+
theme(text=element_text(size=10)) +
ggtitle("Diamond Carat Value versus Price")
df_team
df_team
base_size = 1
ggplot(df_three_teams, aes(SoT, Gls, colour = Team)) +
geom_point(size = 0.5) +
geom_xsideboxplot(aes(y =Gls), orientation = "y", size= 0.2 ) +
scale_xsidey_discrete() +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.background = element_rect(fill = "antiquewhite1", colour = "red"))+
theme(text=element_text(size=10)) +
ggtitle("Diamond Carat Value versus Price")
df_team
df_team = df_team %>% arrange(Gls)
df_team
df_three_teams <- df_team[c(1, 11, 20), ]
df_three_teams
df_three_teams <- df_team[c(1, 10, 20), ]
df_three_teams
df_team = df_team %>% arrange(Gls)
df_three_teams <- df_team[c(1, 10, 20), ]
base_size = 1
ggplot(df_three_teams, aes(SoT, Gls, colour = Team)) +
geom_point(size = 0.5) +
geom_xsideboxplot(aes(y =Gls), orientation = "y", size= 0.2 ) +
scale_xsidey_discrete() +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.background = element_rect(fill = "antiquewhite1", colour = "red"))+
theme(text=element_text(size=10)) +
ggtitle("Diamond Carat Value versus Price")
df_three_teams <- df_team[c(1, 10, 20), ]
df_three_teams
df_team = df_team %>% arrange(Gls)
df_three_teams <- df_team[c(1, 10, 20), ]
base_size = 1
ggplot(df_three_teams, aes(SoT, Gls, colour = Team)) +
geom_point(size = 0.5) +
geom_xsideboxplot(aes(y =Gls), orientation = "y", size= 0.2 ) +
scale_xsidey_discrete() +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.background = element_rect(fill = "antiquewhite1", colour = "red"))+
theme(text=element_text(size=10)) +
ggtitle("Diamond Carat Value versus Price")
df_team = df_team %>% arrange(Gls)
df_three_teams <- df_team[c(1, 10, 20), ]
base_size = 1
ggplot(df_three_teams, aes(SoT, Gls, color = Team)) +
geom_point(size = 0.5) +
geom_xsideboxplot(aes(y =Gls), orientation = "y", size= 0.2 ) +
scale_xsidey_discrete() +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.background = element_rect(fill = "antiquewhite1", colour = "red"))+
theme(text=element_text(size=10)) +
ggtitle("Diamond Carat Value versus Price")
ggplot(df_three_teams, aes(SoT, Gls, colour = Team)) +
geom_point(size = 2) +
geom_xsideboxplot(aes(y =Team), orientation = "y") +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.scale = .3) +
scale_xsidey_discrete() +
scale_ysidex_continuous(guide = guide_axis(angle = 90), minor_breaks = NULL)
df_team
df_three_teams = df[Team == 'Sheffield Utd' | Team == 'Manchester Utd' | Team == 'Arsenal']
df_three_teams = df[Team == 'Sheffield Utd' | Team == 'Manchester Utd' | Team == 'Arsenal',]
df_three_teams
ggplot(df_three_teams, aes(SoT, Gls, colour = Team)) +
geom_point(size = 2) +
geom_xsideboxplot(aes(y =Team), orientation = "y") +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.scale = .3) +
scale_xsidey_discrete() +
scale_ysidex_continuous(guide = guide_axis(angle = 90), minor_breaks = NULL)
df_three_teams = df[Team == 'Sheffield Utd' | Team == 'Manchester Utd' | Team == 'Arsenal',]
df_three_teams
df_three_teams = df[Team == 'Sheffield Utd' | Team == 'Manchester Utd' | Team == 'Arsenal',]
df_three_teams
ggplot(df_three_teams, aes(SoT, Gls, colour = Team)) +
geom_point(size = 2) +
geom_xsideboxplot(aes(y =Team), orientation = "y") +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.scale = .3) +
scale_xsidey_discrete() +
scale_ysidex_continuous(guide = guide_axis(angle = 90), minor_breaks = NULL)
df_three_teams
df_three_teams = df[Team == 'Sheffield Utd' | Team == 'Manchester Utd' | Team == 'Arsenal',]
ggplot(df_three_teams, aes(SoT, Gls, colour = Team)) +
geom_point() +
geom_xsideboxplot(aes(y =Team), orientation = "y") +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.scale = .3) +
scale_xsidey_discrete() +
scale_ysidex_continuous(guide = guide_axis(angle = 90), minor_breaks = NULL)
df_three_teams
df_arsenal = df[Team == "Arsenal"]
df_arsenal = df[Team == "Arsenal",]
df_arsenal
df_arsenal = df[Team == "Arsenal",]
ggplot(df_arsenal, aes(x = SoT, y = Gls)) +
geom_point()
df_arsenal
df_team = df_team %>% arrange(Gls)
base_size = 1
ggplot(df_three_teams, aes(SoT, Gls, color = Team)) +
geom_point(size = 0.5) +
geom_xsideboxplot(aes(y =Gls), orientation = "y", size= 0.2 ) +
scale_xsidey_discrete() +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.background = element_rect(fill = "antiquewhite1", colour = "red"))+
theme(text=element_text(size=10)) +
ggtitle("Diamond Carat Value versus Price")
df_team = df_team %>% arrange(Gls)
base_size = 1
ggplot(df_three_teams, aes(SoT, Gls, color = Team)) +
geom_point(size = 0.5) +
geom_xsideboxplot(aes(y =Gls), orientation = "y", size= 0.2 ) +
scale_xsidey_discrete() +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.background = element_rect(fill = "antiquewhite1", colour = "red"))+
theme(text=element_text(size=10)) +
ggtitle("Shots on Target vs Goals for Arsenal, Manchester Utd, and Sheffield Utd")
df_team = df_team %>% arrange(Gls)
df_three_teams <- df_team[c(1, 10, 20), ]
base_size = 1
ggplot(df_three_teams, aes(SoT, Gls, color = Team)) +
geom_point(size = 0.5) +
geom_xsideboxplot(aes(y =Gls), orientation = "y", size= 0.2 ) +
scale_xsidey_discrete() +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.background = element_rect(fill = "antiquewhite1", colour = "red"))+
theme(text=element_text(size=10)) +
ggtitle("Shots on Target vs Goals for Arsenal, Manchester Utd, and Sheffield Utd")
df_three_teams = df[Team == 'Sheffield Utd' | Team == 'Manchester Utd' | Team == 'Arsenal',]
df_three_teams
ggplot(df_three_teams, aes(SoT, Gls, colour = Team)) +
geom_point() +
geom_xsideboxplot(aes(y =Team), orientation = "y") +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.scale = .3) +
scale_xsidey_discrete() +
scale_ysidex_continuous(guide = guide_axis(angle = 90), minor_breaks = NULL)
df_team <- df_team %>% arrange(Gls)
df_three_teams <- df_team[c(1, 10, 20), ]
ggplot(df_three_teams, aes(SoT, Gls, colour = Team)) +
geom_point() +
geom_xsideboxplot(aes(y =Team), orientation = "y") +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.scale = .3) +
scale_xsidey_discrete() +
scale_ysidex_continuous(guide = guide_axis(angle = 90), minor_breaks = NULL)
df_three_teams = df[Team == 'Sheffield Utd' | Team == 'Manchester Utd' | Team == 'Arsenal',]
ggplot(df_three_teams, aes(SoT, Gls, colour = Team)) +
geom_point() +
geom_xsideboxplot(aes(y =Team), orientation = "y") +
geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
theme(ggside.panel.scale = .3) +
scale_xsidey_discrete() +
scale_ysidex_continuous(guide = guide_axis(angle = 90), minor_breaks = NULL)
top_players
top_players = top_players %>% arrange(Gls)
ggradar(top_players[c(1,11,20),c(1,6,7,8,9,12,18,19)],
grid.min = 0,
grid.mid=0.75,
grid.max = 1.5,
plot.title = "Amazing MVP Seasons",
base.size= 1,
font.radar = "mono")
top_players = top_players %>% arrange(Gls)
ggradar(top_players[c(1,11,20),c(1,6,7,8,9,12,18,19)],
grid.min = 0,
grid.mid=0.75,
grid.max = 1.5,
plot.title = "Amazing MVP Seasons",
base.size= 1,
font.radar = "mono",
point.size = 1,  # Adjust point size here
line.size = 0.5))
top_players = top_players %>% arrange(Gls)
ggradar(top_players[c(1,11,20),c(1,6,7,8,9,12,18,19)],
grid.min = 0,
grid.mid=0.75,
grid.max = 1.5,
plot.title = "Amazing MVP Seasons",
base.size= 1,
font.radar = "mono",
point.size = 1,  # Adjust point size here
line.size = 0.5)
top_players = top_players %>% arrange(Gls)
ggradar(top_players[c(1,11,20),c(1,6,7,8,9,12,18,19)],
grid.min = 0,
grid.mid=0.75,
grid.max = 1.5,
plot.title = "Amazing MVP Seasons",
base.size= 1,
font.radar = "mono")
top_players = top_players %>% arrange(Gls)
ggradar(top_players[c(1,11,20),c(1,6,7,8,9,12,18,19)],
grid.min = 0,
grid.mid=0.75,
grid.max = 1.5,
plot.title = "Amazing MVP Seasons",
base.size= 1,
font.radar = "mono",
point.size = 1)
top_players = top_players %>% arrange(Gls)
ggradar(top_players[c(1,11,20),c(1,6,7,8,9,12,18,19)],
grid.min = 0,
grid.mid=0.75,
grid.max = 1.5,
plot.title = "Amazing MVP Seasons",
base.size= 1,
font.radar = "mono")
top_players = top_players %>% arrange(Gls)
ggradar(top_players[c(1,11,20),c(1,6,7,8,9,12,18,19)],
grid.min = 0,
grid.mid=0.75,
grid.max = 1.5,
plot.title = "Amazing MVP Seasons",
base.size= 1,
font.radar = "mono")
radar_plot +
geom_point(size = 1) +  # Adjust point size
geom_path(linetype = "solid", size = 0.5)
top_players = top_players %>% arrange(Gls)
ggradar(top_players[c(1,11,20),c(1,6,7,8,9,12,18,19)],
grid.min = 0,
grid.mid=0.75,
grid.max = 1.5,
plot.title = "Amazing MVP Seasons",
base.size= 1,
font.radar = "mono")
top_players = top_players %>% arrange(Gls)
ggradar(top_players[c(1,11,20),c(1,6,7,8,9,18,19)],
grid.min = 0,
grid.mid=0.75,
grid.max = 1.5,
plot.title = "Amazing MVP Seasons",
base.size= 1,
font.radar = "mono")
knitr::opts_chunk$set(echo = FALSE)
devtools::install_github("ricardo-bion/ggradar",
dependencies = TRUE)
download.file("https://github.com/ricardo-bion/ggtech/blob/master/Circular%20Air-Light%203.46.45%20PM.ttf", "~/Circular Air-Light 3.46.45 PM.ttf", method = "curl")
extrafont::font_import(pattern = 'Circular', prompt = FALSE)
install.packages("extrafont")
extrafont::font_import(pattern = 'Circular', prompt = FALSE)
knitr::opts_chunk$set(echo = FALSE)
devtools::install_github("ricardo-bion/ggradar",
dependencies = TRUE)
download.file("https://github.com/ricardo-bion/ggtech/blob/master/Circular%20Air-Light%203.46.45%20PM.ttf", "~/Circular Air-Light 3.46.45 PM.ttf", method = "curl")
extrafont::font_import(pattern = 'Circular', prompt = FALSE)
knitr::opts_chunk$set(echo = FALSE)
devtools::install_github("ricardo-bion/ggradar",
dependencies = TRUE)
download.file("https://github.com/ricardo-bion/ggtech/blob/master/Circular%20Air-Light%203.46.45%20PM.ttf", "~/Circular Air-Light 3.46.45 PM.ttf", method = "curl")
top_players = top_players %>% arrange(Gls)
ggradar(top_players[c(1,11,20),c(1,6,7,8,9,18,19)],
grid.min = 0,
grid.mid=0.75,
grid.max = 1.5,
plot.title = "Amazing MVP Seasons",
base.size= 0.5,
font.radar = "mono")
top_players = top_players %>% arrange(Gls)
ggradar(top_players[c(1,11,20),c(1,6,7,8,9,18,19)],
grid.min = 0,
grid.mid=0.75,
grid.max = 1.5,
plot.title = "Amazing MVP Seasons",
base.size= 1,
font.radar = "mono")
df_three_teams
ggplot(df_three_teams, aes(x = Team, y = npxG, color = Team)) +
geom_half_boxplot(outlier.color = "red") +
geom_half_dotplot(dotsize = .50, color = "black", alpha = .5)
install.packages("gghalves")
library(gghalves)
ggplot(df_three_teams, aes(x = Team, y = npxG, color = Team)) +
geom_half_boxplot(outlier.color = "red") +
geom_half_dotplot(dotsize = .50, color = "black", alpha = .5)
df_team
df_team <- df_team[, -which(names(df_team) == "goals_level")]
df_team
df_team
# Calculate quartiles
quartiles <- quantile(df_team$Gls, probs = c(0.25, 0.5, 0.75))
# Define labels for the categories
labels <- c("very low", "low", "medium", "high")
# Create a new column 'goals_level' based on quartiles
df_team$goals_level <- cut(df_team$Gls,
breaks = c(-Inf, quartiles, Inf),
labels = labels,
right = FALSE)
df_team
# Calculate quartiles
quartiles <- quantile(df_team$Gls, probs = c(0.25, 0.5, 0.75))
# Define labels for the categories
labels <- c("very low", "low", "medium", "high")
# Create a new column 'goals_level' based on quartiles
df_team$goals_level <- cut(df_team$Gls,
breaks = c(-Inf, quartiles, Inf),
labels = labels,
right = FALSE)
df_team
# Calculate quartiles
quartiles <- quantile(df_team$Gls, probs = c(0.25, 0.5, 0.75))
# Define labels for the categories
labels <- c("very low", "low", "medium", "high")
# Create a new column 'goals_level' based on quartiles
df_team$goals_level <- cut(df_team$Gls,
breaks = c(-Inf, quartiles, Inf),
labels = labels,
right = FALSE)
ggplot(df_three_teams, aes(x = Team, y = npxG, color = Team)) +
geom_half_violin() +
geom_half_dotplot(dotsize = .50, color = "black", alpha = .5)
ggplot(df_three_teams, aes(x = Team, y = npxG, color = Team)) +
geom_half_boxplot(outlier.color = "red") +
geom_half_dotplot(dotsize = .50, color = "black", alpha = .5)
ggplot(df_three_teams, aes(x = Team, y = npxG, color = Team)) +
geom_half_violin() +
geom_half_dotplot(dotsize = .50, color = "black", alpha = .5)
ggplot(df_three_teams, aes(x = Team, y = npxG, color = Team)) +
geom_half_boxplot(outlier.color = "red") +
geom_half_dotplot(dotsize = .50, color = "black", alpha = .5)
ggplot(df_three_teams, aes(x = Team, y = npxG, color = Team)) +
geom_half_boxplot() +
geom_half_dotplot(dotsize = .50, color = "black", alpha = .5)
