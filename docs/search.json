{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2024-05-06T13:41:02-04:00"
    },
    {
      "path": "data_processing.html",
      "title": "Soccer Data",
      "description": "One of the ",
      "author": [],
      "contents": "\n\n\n\n\n\n\nTotal goals of each team\nFirst, we wil take a look at the total number of goals each team has scored so far this season\n\n\n\nInterpretations:\nArsenal, Manchester City, and Liverpool are taking the lead in the total number of goals scored with 71, 70, and 68 goals, respectively\nSheffield Utd, Burnley, and Everton are 3 teams with the fewest goals\nThis season has experienced a noticeable discrepancy in the total goals between teams\nThe goal rankings reflects pretty precisely the current standing of these teams. More specifically, at the top of the table are Arsenal, Manchester City, and Liverpool and at the bottom of the table are Luton Town, Burnley, and Sheffield Utd.\nWhat makes a good team?\nNot depend on certain players\nIt’s often advised that a team shouldn’t rely too much on just one player’s scoring ability. It’s better for a team to have several players who can chip in with goals. That way, if the top goal scorers get injured, the team’s performance won’t suffer as much.\nFor each team, we will examine how many percents of the total goals coming from the top 5 goal scorers versus the remaining players\n\n\n\n\n\n\n\n\n\nThe “star” factor of a team\nHaving a team with diverse players who can all contribute to scoring goals is crucial. However, what really makes a team shine is having one or two standout players who consistently score more goals than the rest. These are the stars of the team, and they can make a difference in a match. If goals are too evenly distributed among the players, it suggests that the team lacks a reliable go-to scorer, which isn’t ideal.\nAfter considering the whole data set, I decided that the top goal scorers (or star players) of the tournament should be those who have scored at least 8 goals. Then I will count the number of star players each team has and create a word cloud based on this data. A team with more star players will have a bigger name on the map and a deeper color\n\n\n\nInterpretation:\nLiverpool is the team that contains the most star players of the tournament (although my definition of a star player might not cover all aspects), followed by Manchester City, Arsenal, and Aston Villa\nAccording to the previous pie chart, Manchester Utd is the team with the most evenly distributed goals; however, it doesn’t have any real stars in the team (each of its top 5 goal scorers only contribute to about 17% of the total goals). This explains why Manchester Utd doesn’t have a reliable lead goal scorer, and their manager couldn’t find out a stable squad. Consequently, Manchester United currently sits at the 11th position out of 20 teams in terms of goals scored.\nOn the other hand, Manchester City has a desired squad with 2 lead scorers contributing 46% and 36% of the total goals, respectively. Moreover, the remaining players outside the top five contribute 39% of the total goals. This indicates that Manchester City maintains a robust squad, even in the event of injuries to their star players. This partly explains their 2nd place in terms of Total goals and 1st place in the overall standings.\n\n\n\nLet’s now generate a ggradar plot to analyze and compare the performances of the top goal scorers from three different teams. We’ll focus on various metrics including Sh (Shots), SoT (Shots on Target), SoT. (Shot Accuracy Percentage),xG (Expected Goals), and npxG (Non-penalty Expected Goals). The selected players for comparison are Erling Haaland (with 19 goals, representing Manchester City), Bryan Mbeumo (with 8 goals, representing Brentford), and Zeki Amdouni (with 4 goals, representing Burnley). These players are chosen to represent teams positioned 2nd, 12th, and 19th respectively in the goals ranking. Thus, this visualization not only evaluates the individual performances of these players but also offers insights into their team’s overall performance.\n\n\n\nInterpretations:\nApart from SoT., the remaining 4 variables are consistent to the Number of Goals of these players. More specifically, 4 vertices representing Sh, SoT, xG, and npxG of the yellow polygons are furthest from the center, followed by the green polygons, then the purple polygons. This order is consistent to the goals ranking of these 3 players as well as the team that they represent.\nI’m quite surprised that SoT (Shot Accuracy Percentage) does not reflect the number of goals scored. Indeed, as I investigate the relationship between SoT and Goals in the whole data set, I realize that players with high shot accuracy are those with the lowest number of goals. This is because the accuracy tends to decrease as a player attempts more shots.\nDifferent Kinds of Goals\nIn soccer, goals can be categorized into three types: those scored from penalty kicks, those from free kicks, and the rest. While penalty and free-kick goals usually occur less frequently than the third type, their occurrence shouldn’t be significantly lower compared to regular goals. This adds flexibility to the team and provides more ways (or tactics) for scoring goals, particularly when up against a team with a solid defensive strategy\nTo examine if a team has a flexible attacking strategy, we will take a look at the distribution of goal types for each team\n\n\n\nInterpretation:\nAmong the top three teams with the highest number of goals scored (Arsenal, Manchester City, and Liverpool), it’s surprising to note that Arsenal has an exceptionally low percentage of goals from penalty kicks and free kicks. From a strategic standpoint, I believe the balanced distribution seen in Manchester City and Liverpool is more advantageous in the long term. This is because scoring from penalty kicks and free kicks conserves a significant amount of energy, which is crucial during the intense phases of the season.\nI think this difference of the 3 leading teams is very interesting. Manchester City and Liverpool are renowned and experienced teams in the EPL, who has won the cup many times in the past 6 years. Meanwhile, Arsenal is recognized for its attractive attacking style but has often lacked strategic depth, causing it to miss many trophies in the past. Therefore, it is understandable why Manchester City and Liverpool opt for a more pragmatic and effective approach.\nWhich factors have the strongest correlation to the Number of Goals?\n\n\n\nInterpretation:\nLooking at the color of the matrix, we see that the variables having the strongest correlation with Goals are:\nSh (Number of shots)\nSoT (Number of shots on target)\nxG (Expected goals)\nnpxG (Non-penalty expected goals)\nThese variables have a strong linear relationship with the number of goals that a player scored, which, in turns, are likely to have a strong correlation to the total number of goals of the whole team. Therefore, to study the scoring ability of a team, we will focus on these variables.\nShot and Shot on Target\nFor each individual players\nFirst, I choose to study 3 teams Sheffield Utd, Manchester Utd, and Arsenal, whose goals are characterized as low, medium, and high in the tournament ranking\nLet’s explore the relationship between the number of shots on target and number of goals for each player in these 3 teams\n\n\n\nInterpretations:\nThe position of the points and the lines of best fit both suggest a positive linear relationship between Shots on Target and Goals Scored. Looking at the boxplot, we realize that Arsenal’s distribution has significantly higher quartiles than the distribution of the other 2 teams. This is consistent to the density plot on the right, which indicates that Arsenal players scored the most goals, followed by Manchester Utd players, then Sheffield Utd players.\nFor the whole team\nNext, I will accumulate the number of goals, shots, and shots on target of all players in each team to examine the relationship of these 3 variables\n\n\n\n\n\n\nInterpretation:\nThere is a strong positive linear relationship between Shot on Target and Goals (indicated by the line of best fit) as well as between Shots and Goals (indicated by the fact that higher points have lighter blue color)\n\n\n\nExpected Goals and Non-penalty Expected Goals\nExpected Goals (xG) is a metric designed to measure the probability of a shot resulting in a goal\nExpected Goals (xG) is a metric designed to measure the probability of a shot that is not a penalty kick resulting in a goal\n\n\n\nInterpretation:\nBoth Expected Goals and Non-penalty Expected Goals have a strong positive correlation to Goals scored\n\n\n\nInterpretation\nThe density plots of npxG implies that Arsenal players are more likely to have higher non-penalty expected goals, which is consistent to the density plots of Goals (on the right hand side). In general, non-penalty expected goals are correlated to the number of goals scored. This is because the majority of goals come from non-penalty goals; therefore, a players who have more shots that are likely to result in a goal will have more goals in total.\nScoring efficiency of a team\nTo determine the efficiency of a team, we will take a look at the difference between Actual Goals and Expected Goals. If a team has more goals than its total xG probably, then it is likely that the players of that teams have an above average shooting/finishing ability. On the other hand, a negative goal difference might indicate a team has experienced poor luck or has below average finishing ability.\n\n\n\nInterpretation\nAccording to this graph, Arsenal, Aston Villa and Manchester City are top three teams that capitalized on their chances most effectively. It’s not surprising that Arsenal and Manchester City secured the 1st and 2nd positions, respectively, in terms of goals scored in the EPL.\nEverton and Brentford are the least proficient at converting chances into goals.\n\n\n\n",
      "last_modified": "2024-05-06T13:41:16-04:00"
    },
    {
      "path": "generative_art_work.html",
      "title": "Generative Art Work",
      "description": "One of the most interesting and creative activities in this course is making Generative Art, which is created by an autonomous system using algorithms and mathematical patterns.",
      "author": [],
      "contents": "\nArt work 1: Using canvas_recaman()\nMy first art work is generated using the Recaman’s sequence. My idea was to create an image with the vibe of summer and the beach, so I chose a sky blue palette and incorporated a pattern simulating palm trees\nA generative artwork using canvas_recaman()Art work 2: Using canvas_function()\nMy second art work is made from a trigonometric function. By selecting a dark palette with symmetrical sine and cosine patterns, I tried to replicate a mysterious crystal ball\nA generative artwork using canvas_function()Art work 3: Using canvas_flow()\nMy last art work is created from the canvas_flow() function, which uses algorithms to determine the path in which certain points flow through a screen/surface. The curves are colored with the typical Bucknell’s orange and blue.\nA Bucknell themed generative artwork using canvas_flow()\n\n\n",
      "last_modified": "2024-05-06T13:41:17-04:00"
    },
    {
      "path": "ggplot_extension.html",
      "title": "Ggplot Extension Project",
      "description": "Ggplot is a versatile R package renowned for its expansive collection of data visualization tools. Through this project, I learned how to use a new ggplot library by investigating related documentations on my own and explained the concept to people who are unfamiliar with it. In addition, I also learned about 6 other packages from my classmates; many of those packages were later implemented in my final website. In this project, I was working specifically on ggcorrplot, a wonderful package to visualize the correlation matrix between multiple variables in a dataset",
      "author": [],
      "contents": "\n\nData set\n\nBodyFat is a dataframe that contains 100 observations on 10 variables:\nBodyfat, Age, Weight, Height, Neck, Chest, Abdomen, Ankle, Biceps, and Wrist. All of these variables\nare numerical, which is a requirement to create a correlation matrix.\nSince this data set is not too large, I will use all 10 variables to analyze the correlation between any pair\nof physiologic measurements\n\nDefinitions\n\n\nThe correlation between two variables measures the degree to which movements in one variable correspond\nto movements in another.\nA correlation ranges between -1 (perfect negative relationship) and 1 (perfect positive relationship).\nThe absolute value of a correlation indicates the strength of that relationship.\nA correlation of 0 means no linear relationship.\n\n\nA correlation matrix is a table showing the correlation coefficients between each pair of variables.\nEach cell in the table represents the correlation of the two corresponding variables.\n\n\n\ncorr = round(cor(BodyFat), 1)\nggcorrplot(corr)\n\n\n\n\nInterpretation of the visualization\n\n\nThis visualization is a 10x10 grid corresponding to 10 variables in the data set\n\n\nEach cell is colored based on the correlation coefficient between the variable on the corresponding\nrow and column. The more intense the color, the stronger the relationship\n\n\nThis plot contains mostly of orange/red cells (with different brightness), indicating many pairs of variables in\nthis data set have a positive relationship.\n\n\nThe anti-diagonal is all red (i.e. correlation = 1) because the correlation coefficient of a variable with itself is\nalways 1\n\n\nThe colors are symmetric about the anti-diagonal because each pair of variable are repeated twice\n\n\nLooking at the visualization, some pairs with a strong, linear, positive correlation include (Abdomen, Chest), (Abdomen, Weight), (Chest, Weight), (Neck, Wrist), etc\n\n\nSome pairs with very weak or nearly no linear relationship are (BodyFat, Height), (Age, Neck), (Age, Ankle), etc\n\n\nAdd-ons\n\n\nThe ggcorrplot package provides many options to customize the correlation matrix by specifying optional parameters like\ntype, colors, ggtheme, lab, etc. Below are some versions of the correlation matrix using the same data set\n\n\nVersion 1\n\n\n\nggcorrplot(\n  corr,\n  hc.order = TRUE,\n  type = \"lower\",\n  colors = c(\"darkgreen\", \"white\", \"yellow\"),\n  ggtheme = ggplot2::theme_dark,\n  lab = TRUE,\n  legend.title = \"Correlation\",\n  title = \"Correlation matrix for 10 physiologic measurements\"\n)\n\n\n\n\nSome modifications made in version 1\n\n\nIn this new version, the matrix cells are reordered based on their similarity in terms of correlation,\ngiving us a sense of closely related variables\n\n\nBecause a correlation matrix is always symmetric about its diagonal axis, I choose to display only the lower\nhalf of its to reduce the complexity of the matrix\n\n\nI also added the correlation value on each cell, which serves as an additional indicator and conforms to the\naccessibility principles\n\n\nVersion 2\n\n\n\nggcorrplot(\n  corr,\n  method = \"circle\",\n  hc.order = TRUE,\n  type = \"lower\",\n  ggtheme = ggplot2::theme_minimal,\n  legend.title = \"Correlation\",\n  title = \"Correlation matrix for 10 physiologic measurements\"\n)\n\n\n\n\nSome modifications made in version 2\n\n\nInstead of using numerical values as an “it factor”, I used the size of circles, which is indeed proportional to the strength of the corresponding correlation\n\n\nThis graph is quite intuitive to visualize the strength and direction of the relationship between variables.\nFor example, we can easily tell that Abdomen and Weight have a strong positive linear relationship (due to the big red circle) while Age has nothing to do with Neck (due to the small white circle)\n\n\n\n\n",
      "last_modified": "2024-05-06T13:41:21-04:00"
    },
    {
      "path": "index.html",
      "title": "My Website",
      "description": "Welcome to the website. I hope you enjoy it!\n",
      "author": [],
      "contents": "\n\n          \n          \n          Vy Tran\n          \n          \n          \n          \n          Past Visualizations\n           \n          ▾\n          \n          \n          Generative Art Work\n          Ggplot Extension Project\n          Confidence Level Shiny Project\n          Scatterplot on Multiple Variables\n          Ggridges plot\n          \n          \n          Soccer Data\n          \n          \n          \n          ☰\n          \n          \n      \n        \n          \n            \n          \n            My Website\n          \n          \n            \n          \n          \n            \n          \n          \n            \n                \n                  \n                    Email\n                  \n                \n              \n                          \n        \n      \n    \n\n    \n      \n        \n          \n            \n          \n            My Website\n          \n          \n            \n          \n          \n            \n          \n        \n      \n      \n          \n              \n                                \n                    \n                    Email\n                    \n                \n                              \n          \n      \n    \n\n    \n    \n    ",
      "last_modified": "2024-05-06T13:41:25-04:00"
    },
    {
      "path": "past_viz_1.html",
      "title": "Scatterplot on Multiple Variables",
      "description": "One of the past visualizations that I found most impressive is a scatterplot representing 4 variables of the `survey` data set on a same plot",
      "author": [],
      "contents": "\n\n\nData set\n\nsurvey is a data set taken from the MASS library, containing the responses of 237 students on 12 variables.\n\nVariables\n\nThis visualization illustrates the relationship of 4 variables:\n\nPulse (pulse rate): int\n\n\nHeight: num\n\n\nSmoke (smoking frequency): factor\n\n\nExer (exercise frequency): factor\n\n\n\n\n\nInterpretations\n\nEach observation is represented by a dot on the scatterplot\nThe x-axis represents Pulse, the y-axis represents Height, the shape of each dot represented the Smoke category, and the color of each dot represents the Exercise category.\nSince the dots scatter all over the visualization without any clear pattern, it is likely that there is no linear relationship between Pulse and Height. This can be confirm as the correlation between these 2 variables is around -0.08, which is very small.\n\n[1] -0.08326195\n\nSince red dots outnumber other colors, the majority of students in this survey never smoke. We also observe no correlation between Smoke and other variables\n\n\nHeavy Regul Occas Never \n   11    17    19   189 \n\nThe circles and triangles outnumber squares, so the number of students doing exercise frequently/sometimes are higher than those who never do exercise.\n\n\nFreq Some None \n 115   98   24 \n\n\n\n\n",
      "last_modified": "2024-05-06T13:41:27-04:00"
    },
    {
      "path": "past_viz_2.html",
      "title": "ggridges plot",
      "description": "In exam 1, there was a problem in which we have to replicate a visualization using `ggridges`. This is a ggplot extension that allows us to arrange multiple density plots, creating an impression of mountain ranges. The visualizations created from this library look very novel and illustrative to view the behavior and quantiles of a distribution. ",
      "author": [],
      "contents": "\n\n\nData set\n\nhsb2 is a data set loaded from the file “MATH230_Exam1_Data.RData”. This data set originally contains the responses of 200 students on 11 variables. However, after going through data processing, the data set includes an additional column called total_score\n\nVariables\n\nThis visualization focuses on 2 variables:\n\ntotal_score: int\n\n\nrace: factor\n\n\n\nggplot(hsb2, aes(x = total_score, y = race)) +\n  geom_density_ridges(\n    jittered_points = TRUE, quantile_lines = TRUE, scale = 0.69, alpha = 0.7,\n    vline_width = 1, vline_color = \"purple3\",\n    point_size = 1, point_alpha = 1,\n    position = position_raincloud(adjust_vlines = TRUE)\n  ) +\n  theme(axis.text.y = element_text(angle = 45, hjust = 1)) +\n  scale_y_discrete(labels = function(x) str_to_title(x)) +\n  xlab(\"Total standardized test score\") +\n  ylab(\"Student's race\") +\n  ggtitle(\"Comparing distributions of test scores by race\")\n\n\n\n\nInterpretation of the visualization\n\nThe x-axis represents the total_score, the y-axis represents race, which is a categorical variable containing 4 values: White, Hispanic, Asian, and Afria American\nEach density ridge shows the distribution of total test score of all students with a specific race.\nWe can see the overall shape of each distribution. For example, the distribution of White and African American has a bell shape. The distribution of Hispanic is slightly skewed right. Meanwhile, the distribution of Asian contains 2 peaks at the 1st and 3rd quartiles.\nBelow each density plot, we see the dots representing all observations in the corresponding category and 3 vertical lines marking the 1st quartile, median, and 3rd quartile of the distribution.\nWe can realize that the number of white students is much higher than the number of other races\nThe median score of White and Asian students is around 270, while the median score of Hispanic and African American students is around 225\nThe quantiles of White and Asian distributions are pretty close together. The quantiles of Hispanic and Africa American distributions are also pretty similar.\nThere are some points in the African American plots that lie very far away from the center; however, the current graph is not sufficient to tell if they are outliers or not\nThe White distribution is likely to have a wide spread according to the visualization\nIn general, ggridges gives us a descriptive visualization with a lot more information than the density plot, scatterplot, or boxplot alone. This is a big advantage of this library, making it one of my favorite tools that I have learnt in this course.\n\n\n\n",
      "last_modified": "2024-05-06T13:41:30-04:00"
    },
    {
      "path": "shiny_app.html",
      "title": "Confidence Level Shiny Project",
      "description": "Confidence Level is an important concept in Statistics, but it is not straightforward for many people . In this project, Paige Sandy and I utilized Shiny,  an open source R package for building interactive graphs, to create multiple data simulations to explain the concept of Confidence Levels in a more intuitive way for introductory Statistics students ",
      "author": [],
      "contents": "\n\nData set\n\nThe population is created using function  rnorm(n, mean = 100, sd = 4) in which the population size n is set by the user by a slider. This function will create a vector of random numbers following a normal distribution.\n\nVariables\n\nOur app contains 3 main parts, each part contains different variables\n\nRepeated Sampling\n\nThe sampling distribution of a statistic is a probability distribution based on a large number of samples of size from a given population.\nIn this section, we tried to explain this definition by allowing the user to modify the value of 3 variables: sample size, number of samples, and confidence level. Each time one of the inputs changes, the app will recreate a corresponding graph to help users visualize the effects of these variables on the sample statistic as well as the confidence interval.\n\nInterval Width\n\nIn this section, users can use sliders to change the value of confidence interval and sample size. A visualization will be generated based on these inputs to help users verify the fact that “the higher the level of confidence, the wider the interval”\n\nInterval Accuracy\n\nIn this section, users may change the value of 3 variables: number of samples, sample size, and confidence interval. \nThis simulation will help users verify the statement “If we were to compute many, many 100(1 − α)%\nconfidence intervals for that many samples, then approximately 100(1 − α)% of those intervals will\ncontain the population parameter”\nThe generated visualization represents the calculated confidence interval corresponding to each sample. Each interval is colored in green (meaning that interval captures the true mean) or red (meaning that interval does not capture the true mean). Based on the number of red and greens lines, users may visualize the effects of each variable on the interval accuracy.\nThrough this interactive graph, we also help users distinguish 2 concepts: Probability and Confidence level\nProbability: indicates whether or not an interval contains the population parameter. Probability is either 0 (false, marked in red) or 1 (true, marked in green). There is no value in between.\nConfidence level: tells how many percents of all confidence intervals contain the population parameter\n\n\n\n\n\n",
      "last_modified": "2024-05-06T13:41:31-04:00"
    }
  ],
  "collections": []
}
