---
title: "Soccer Data"
description: |
  A close look into the shooting statistics of EPL players in the 2023-2024 season
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

```{r}
library(dplyr)
library(ggplot2)
library(ggwordcloud)
library(ggcorrplot)
library(reshape2)
```


```{r}
org_data = read.csv("player_shooting_2023_2024.csv", header = TRUE)

# remove undefined rows
data =org_data[!is.na(org_data$Age), ]
```


```{r}
attach(data)
```


```{r}
# convert char into factor type
data <- mutate_if(data, is.character, as.factor)
```

```{r}
# total goals by team
goals_by_squad <- aggregate(Gls ~ Squad, data, sum, na.rm = TRUE)
# penalty goals by team
pk_by_squad <- aggregate(PK ~ Squad, data, sum, na.rm = TRUE)
# free kick goals by team
fk_by_squad <- aggregate(FK ~ Squad, data, sum, na.rm = TRUE)
# missing penalty by team
pk_miss_by_squad = aggregate(PKatt - PK ~ Squad, data, sum, na.rm = TRUE)
names(pk_miss_by_squad)[2] <- "PKmiss"

# number of players by nation
nation_count <- table(Nation)
nation_count <- as.data.frame(nation_count)

squad_data <- merge(goals_by_squad, pk_by_squad, by = "Squad", all = TRUE)
squad_data <- merge(squad_data, pk_miss_by_squad, by = "Squad", all = TRUE)
squad_data <- merge(squad_data, fk_by_squad, by = "Squad", all = TRUE)

squad_data['OtherGls'] = squad_data['Gls'] - squad_data['PK'] - squad_data['FK']

rm(list = c("goals_by_squad", "pk_by_squad", "pk_miss_by_squad"))
```

```{r}
# draw a bar chart of total goals by team
ggplot(squad_data) + 
    geom_bar( aes(x=Squad, y= Gls) ,
              stat = "identity", 
              fill='skyblue') +
    labs(x = "Squad", y = "Goals", title = "Total Goals by Team") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
ggplot(squad_data) + 
    geom_bar( aes(x=Squad, y= PK) ,
              stat = "identity", 
              fill='skyblue') +
    labs(x = "Squad", y = "Goals", title = "Number of Penalty Goals by Team") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
ggplot(squad_data) + 
    geom_bar( aes(x=Squad, y=PKmiss) ,
              stat = "identity", 
              fill='skyblue') +
    labs(x = "Squad", y = "Missing penalty kicks", title = "Number of Missing Penalty Kicks by Team") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


```{r}
complete_data_SoT = data[!is.na(data$SoT.), ]

ggplot() +
  geom_histogram(aes(x =complete_data_SoT$SoT., y = after_stat(density)), bins = 30, fill='red', alpha=0.7) +  
  geom_density(aes(x =complete_data_SoT$SoT.)) +
  labs(x = "Quantitative Variable", y = "Density", title = "Distribution of Short Accuracy of All Players")
```

```{r}
ggplot(nation_count) + 
  geom_bar(aes(y = Nation, x = Freq),  # Switch x and y variables
           stat = "identity", 
           fill = 'skyblue', 
           width = 0.8) +  # Adjust the width to increase the space between rows
  labs(x = "Goals", y = "Squad") 
```


```{}
ggplot(nation_count, aes(label = Nation, size = Freq)) +
  geom_text_wordcloud(shape="triangle-upright", rm_outside=TRUE)+
  scale_size_area(max_size=30)+
  theme_minimal() + 
  scale_color_gradient(low = "skyblue2", high = "midnightblue")
```

```{}
ggplot() +
  geom_histogram(aes(x =data$Age, y = after_stat(density)), bins = 30, fill='orange', alpha=0.7) +  
  geom_density(aes(x =data$Age)) +
  labs(x = "Quantitative Variable", y = "Density", title = "Distribution of Age")
```

```{r}
numeric_data <- na.omit(data[sapply(data, is.numeric)])
corr = cor(numeric_data)
ggcorrplot(corr,
           hc.order = TRUE,
           type = "upper",
           colors = c("navyblue", "white", "red"),
           outline.color = "black",
           ggtheme = ggplot2::theme_minimal(),
           )
```

```{r}
# determine how many different players contribute to the total goals of team -> vulnerability of a team when players get injured
players_with_goals = data[Gls > 0,]
players_with_goals= table(players_with_goals$Squad)
players_with_goals <- as.data.frame(players_with_goals)
names(players_with_goals)[1] <- "Squad"
names(players_with_goals)[2] <- "PlayerGls"

squad_data <- merge(squad_data, players_with_goals, by = "Squad", all = TRUE)
#rm(players_with_goals)
```

```{r}
ggplot(squad_data) + 
  geom_bar(aes(y = Squad, x = PlayerGls),  # Switch x and y variables
           stat = "identity", 
           fill = 'skyblue', 
           width = 0.8) +  # Adjust the width to increase the space between rows
  labs(x = "Goals", y = "Squad", title = "Number of ") 
```

```{r}
players_with_goals = data[Gls > 0,]

# The number of goals of the player with most goal in each team
max_goal_by_team <- aggregate(Gls ~ Squad, data, max)
names(max_goal_by_team)[2] <- "MaxGls"

squad_data <- merge(squad_data, max_goal_by_team, by = "Squad", all = TRUE)
#rm(max_goal_by_team)

squad_data['PropMaxGls'] = squad_data$MaxGls / squad_data$Gls
```

```{}

ggplot(squad_data) + 
  geom_bar(aes(y = Squad, x = PropMaxGls),  # Switch x and y variables
           stat = "identity", 
           fill = 'skyblue', 
           width = 0.8) +  # Adjust the width to increase the space between rows
  labs(x = "Contribution proportion of top goal-scorers", y = "Squad") 

# Depends on a few playsers -> not good
```





```{r}
# Filter the data to include only players with goals greater than or equal to 8
filtered_data <- data %>%
  filter(Gls >= 8)

# Count the number of players in each team (Squad)
players_count <- filtered_data %>%
  group_by(Squad) %>%
  summarise(Players_with_Gls_8_or_more = n())

# Print the resulting dataframe
print(players_count)
```



```{r}
unique_squad = unique(Squad)
```

```{}
# Create the scatter plot of age vs goal
ggplot(data, aes(x = Age, y = Gls)) +
  geom_point() +
  labs(x = "Age", y = "Goals", title = "Scatter Plot of Age vs Goals")

```

```{r}
squad_goals <- squad_data[, c("Squad", "PK", "FK", "OtherGls")]
```


```{r}
squad_goals$Squad <-squad_goals$Squad
squad_melt <- melt(squad_goals, id.vars = "Squad")
```

```{r}
library(scales)
 ggplot(squad_melt, aes(Squad, value, fill = variable)) +
    geom_bar(position = "fill", stat = "identity") +
    scale_y_continuous(labels = percent)+
    theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{}
data_filtered <- na.omit(data)

# Load the ggplot2 library
library(ggplot2)

# Create the violin plot
ggplot(data = data_filtered, aes(y = SoT.)) +
  geom_violin() +
  labs(title = "Violin Plot of Shots on Target Percentage", y = "Shots on Target Percentage") +
  theme_minimal()

```













====================================================

Can we relate this to the ranking of teams on the board?

```{r}
# total goals by position
goals_by_pos <- aggregate(Gls ~ Pos, data, sum, na.rm = TRUE)
goals_by_pos
```
How to resolve players playing more than 1 positions

```{r}
unique_pos <- character()

# Iterate over each row to get unique positions
for (i in 1:nrow(data)) {
  positions <- strsplit(as.character(data$Pos[i]), ",")[[1]]
  unique_pos <- union(unique_pos, positions)
}

unique_pos
```

```{}
expanded_df <- data.frame(Player = character(), Pos = character(), Gls = numeric(), stringsAsFactors = FALSE)

# Get unique combinations of 'Player' and 'Pos'
unique_combinations <- unique(paste(data$Player, data$Pos))

# Iterate over unique combinations
for (comb in unique_combinations) {
  # Filter rows with the current combination
  subset_data <- data[data$Pos == comb, ]
  # Aggregate goals for the current combination
  total_goals <- sum(subset_data$Gls, na.rm = TRUE)
  # Split the combination into 'Player' and 'Pos'
  player_pos <- unlist(strsplit(comb, " "))
  player <- player_pos[1]
  pos <- player_pos[2]
  # Create a row in the expanded dataframe
  expanded_df <- rbind(expanded_df, data.frame(Player = player, Pos = pos, Gls = total_goals))
}

# Aggregate the data based on the single position
aggregated_data <- aggregate(Gls ~ Pos, expanded_df, sum)

#expanded_df
rm(aggregated_data)
rm(expanded_df)

```

```{r}
rm(list = ls())
```

```{r include=FALSE}
install.packages("Lahman")
library(ggradar)
library(ggplot2)
library(dplyr)
library(scales)
library(tibble)
library(Lahman)
data("Batting")
attach(Batting)
#Aaron Judge 2022: 111263
#Barry Bonds 2001: 80769
#Ted Williams 1949: 34458
#Mike trout 2016: 102714
#Mookie Betts 2018: 104454
#Xander Bogaerts: 110667
MVPs = battingStats(Batting[c(34458, 80769, 102714, 104454, 110667, 111263),])
MVPs[,"Adj. OPS"] = MVPs[,28]/1.422
MVPs[,"1B"]= MVPs[,9]-(MVPs[,10]+MVPs[,11]+MVPs[,12])
MVPs[,"playerID"] = c("Ted Williams","Barry Bonds","Mike Trout","Mookie Betts","Not MVP", "Aaron Judge")
```

# GGRadar Package

The ggradar package allows us to create `radar charts` which are also known as `spider charts`. It can be an appealing way to look at multiple quantitative variables which are normalized into a percent output.It is mainly used to compare different quantitative variables across categories such as products, animal species, or in this case baseball players. 

```{r echo=FALSE}
ggradar(MVPs[c(1,2,6),c(1,26,27,28,29)],
        grid.min = 0,
        grid.mid=0.75,
        grid.max = 1.5, 
        plot.title = "Amazing MVP Seasons",
        base.size= 1,
        font.radar = "mono")
```