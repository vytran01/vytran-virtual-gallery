---
title: "Your Title"
output:
  distill::distill_article:
    css: "custom-styles.css"  # Link the custom CSS file
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)

devtools::install_github("ricardo-bion/ggradar", 
                          dependencies = TRUE)
download.file("https://github.com/ricardo-bion/ggtech/blob/master/Circular%20Air-Light%203.46.45%20PM.ttf", "~/Circular Air-Light 3.46.45 PM.ttf", method = "curl")

```

```{r}
library(dplyr)
library(ggplot2)
library(ggwordcloud)
library(ggcorrplot)
library(reshape2)
library(shiny)
library(gridExtra) 
library(scales)
library(ggrepel)
library(ggradar)
library(magrittr)
library(dplyr)
library(ggside)
library(gghalves)

```


```{r}
org_data = read.csv("player_shooting_2023_2024.csv", header = TRUE)

# remove undefined rows
df = org_data[!is.na(org_data$Age), ]
```


```{r}
attach(df)
```


```{r}
# convert char into factor type
df <- mutate_if(df, is.character, as.factor)
# remove unwanted columns
df <- subset(df, select = -c(X, Rk, Nation, Born, Matches, Birth.Month))
# rename some columns
names(df)[names(df) == "Squad"] <- "Team"
```



# What makes a balanced team?

## Various players contributing to the total goals

* It is suggested that a team does not depend heavily on the scoring ability of a single player. Instead, a team should have multiple players contributing to the total goals so that its performance is not less affected in case the top goal scorers get injured
* At the same time, a strong team is a team that contains a few star players who scored significantly more goals than the others. If the distribution of goals for a team is too balanced among its player, then it is likely that there is no "trustworthy" goal scorer for the team, which is not ideal

```{r}
# Filter the dataframe to include only players who contribute at least 1 goal for each team
df_with_goals <- df[Gls >= 1, ]
```

First, let's explore the number of different players contributing to the team's goals

```{r}
players_with_goals= table(df_with_goals$Team)


players_with_goals <- as.data.frame(players_with_goals)
names(players_with_goals)[1] <- "Team"
names(players_with_goals)[2] <- "NumPlayers"


ggplot(players_with_goals) + 
  geom_bar(aes(y = Team, x = NumPlayers),  # Switch x and y variables
           stat = "identity", 
           fill = 'skyblue', 
           width = 0.8) +  # Adjust the width to increase the space between rows
  labs(x = "Goals", y = "Team", title = "Number of different players contributing to the team's goals") 
```

Next, let's look at the top 5 goal scorers of each team and explore the goal distribution of each team

```{r}

# Group the data by team and player, and count the number of goals each player contributes to each team
goals_contribution <- aggregate(Gls ~ Team + Player, data = df_with_goals, FUN = sum)
goals_contribution <- goals_contribution[order(goals_contribution$Team, -goals_contribution$Gls), ]

plot_list <- list()


# Create a pie chart for each team
for(team in unique(goals_contribution$Team)) {
  # Subset the data for the current team
  team_data <- subset(goals_contribution, Team == team)
 top_players <- head(team_data, 5)
  other_goals <- sum(team_data$Gls) - sum(top_players$Gls)
  other_data <- data.frame(Team = team, Player = "Other", Gls = other_goals)
  
 
   pie_data <- rbind(top_players, other_data)
  
  # Create the pie chart
  pie_data <- rbind(top_players, other_data)
  
  # Create the pie chart
  pie_chart <- ggplot(pie_data, aes(x = "", y = Gls, fill = Player)) +
    geom_bar(stat = "identity") +
    geom_text(aes(label = paste0(round((Gls / sum(pie_data$Gls)) * 100), "%")),
              position = position_stack(vjust = 0.5), size = 4) + 
    coord_polar("y", start = 0) +
    labs(fill = "Player") +
    theme_void()
  
  plot_list[[team]] <- pie_chart
}

#for(i in seq_along(plot_list)) {
 # print(plot_list[[i]])
#}

grid.arrange(plot_list[[1]], plot_list[[2]], ncol=2)

```

In soccer, there are 3 types of goal: goals coming from penalty shoots, goals coming from free kicks, and other goals. Although the frequency of penalty goals and free-kick goals are typically much lower than the third type, they should not be too low compared to the frequency of other goals. This makes the team more flexible and have more ways (or strategies) to obtain goals. 

```{r}
# total goals by team
goals_by_team <- aggregate(Gls ~ Team, df, sum, na.rm = TRUE)
# penalty goals by team
pk_by_team <- aggregate(PK ~ Team, df, sum, na.rm = TRUE)
# free kick goals by team
fk_by_team <- aggregate(FK ~ Team, df, sum, na.rm = TRUE)

df_team <- merge(goals_by_team, pk_by_team, by = "Team", all = TRUE)
df_team <- merge(df_team, fk_by_team, by = "Team", all = TRUE)
df_team['OtherGls'] = df_team['Gls'] - df_team['PK'] - df_team['FK']
```


```{r}
goal_types <- df_team[, c("Team", "PK", "FK", "OtherGls")]

df_melt <- melt(goal_types, id.vars = "Team")
 ggplot(df_melt, aes(Team, value, fill = variable)) +
    geom_bar(position = "fill", stat = "identity") +
    scale_y_continuous(labels = percent)+
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Which factors have the strongest correlation to the Number of Goals

```{r}
df_numeric <- na.omit(df[sapply(df, is.numeric)])

corr = cor(df_numeric)
ggcorrplot(corr,
           hc.order = TRUE,
           #type = "upper",
           colors = c("navyblue", "white", "red"),
           outline.color = "black",
           ggtheme = ggplot2::theme_minimal(),
           )
```

**Interpretation:**

Looking at the color of the matrix, we see that the variables having the strongest correlation with Goals include Sh (Number of shots), SoT (Number of shots on target), xG (Expected goals), npxG (Non-penalty expected goals). These variables have a strong linear relationship with the number of goals that a player scored, which, in turns, are likely to have a strong correlation to the total number of goals of the whole team. Therefore, to study the scoring ability of a team, we will focus on these variables.


## Shot and Shot on Target

### For each individual players

```{r}
attach(df)
df_three_teams = df[Team == 'Sheffield Utd' | Team == 'Manchester Utd' | Team == 'Arsenal',]

ggplot(df_three_teams, aes(SoT, Gls, colour = Team)) + 
  geom_point() +
  geom_xsideboxplot(aes(y =Team), orientation = "y") +
  geom_ysidedensity(aes(x = after_stat(density)), position = "stack") +
  theme(ggside.panel.scale = .3) +
  scale_xsidey_discrete() +
  scale_ysidex_continuous(guide = guide_axis(angle = 90), minor_breaks = NULL) 
```



### For the whole team


```{r}
Sh_team = aggregate(Sh ~ Team, df, sum, na.rm = TRUE)
SoT_team = aggregate(SoT ~ Team, df, sum, na.rm = TRUE)

df_team <- merge(df_team, Sh_team, by = "Team", all = TRUE)
df_team <- merge(df_team, SoT_team, by = "Team", all = TRUE)
```



```{r}
ggplot(df_team, aes(x = SoT, y = Gls, fill = Sh, label = Team)) +
  geom_point(shape = 21, color = "black", size = 3) + 
  geom_smooth(method = "lm", se = FALSE) +  
  geom_text_repel(aes(label = Team), size = 3) +
  labs(x = "Shots on Target", y = "Goals") +  
  theme_minimal() 
```

```{r}
# Calculate quartiles
quartiles <- quantile(df_team$Gls, probs = c(0.25, 0.5, 0.75))

# Define labels for the categories
labels <- c("very low", "low", "medium", "high")

# Create a new column 'goals_level' based on quartiles
df_team$goals_level <- cut(df_team$Gls,
                            breaks = c(-Inf, quartiles, Inf),
                            labels = labels,
                            right = FALSE)


```




## Expected Goals and Non-penalty Expected Goals


```{r}
ggplot(df, aes(x = xG, y = Gls, fill = npxG)) +
  geom_point(shape = 21, color = "black", size = 2) + 
  geom_smooth(method = "lm", se = FALSE) +  
  labs(x = "Expected Goals", y = "Goals") +  
  scale_fill_gradient(name = "Non-penalty Expected Goals", low = "blue", high = "red") +  
  theme_minimal()  # Set theme
```

```{r}
ggplot(df_three_teams, aes(x = Team, y = npxG, color = Team)) + 
  geom_half_boxplot() +
  geom_half_dotplot(dotsize = .50, color = "black", alpha = .5)
```




# Scoring efficiency of a team



```{r}
# Difference between expected goals and actual goals of each team
g_xg_team <- aggregate(G.xG ~ Team, df, sum, na.rm = TRUE)

ggplot(g_xg_team) + 
        geom_col(aes(x= Team, y = G.xG , fill = Team))+
        geom_text(aes(x=Team , y= G.xG, label= round(G.xG,2)), vjust=0) +
        ggtitle('The difference between the Actual Goals and Expected Goals') + 
        theme_bw() +
        theme(legend.position = 'none',
         axis.text.x = element_text(angle = 90, hjust=1),
         )
```

**Interpretation**

* According to this graph, Arsenal, Aston Villa and Manchester City are 3 teams that exploited their chances most effectively
* Everton and Brentford are the worst at turning chances into goals



# The "star" factor of a team

The impact of talented or high-profile players on a team's overall performance and success

```{r}
df_star_players = df[Gls >= 5,]
star_players_table <- table(df_star_players$Team)
star_players_by_team <- as.data.frame(star_players_table)
names(star_players_by_team)[1] <- "Team"
names(star_players_by_team)[2] <- "NumPlayers"

star_players_by_team <- subset(star_players_by_team, NumPlayers > 0)

ggplot(star_players_by_team, aes(label = Team, size = NumPlayers, color = NumPlayers)) +
    geom_text_wordcloud() +

  scale_size_area(max_size = 8)  +
  theme_minimal() +
  scale_color_gradient(low="powderblue", high="darkblue")
```

```{r}
df_with_goals <- df[df$Gls >= 1, ]

# Group the data by team and player, and summarize to get the player with the most goals for each team
top_players <- df_with_goals %>%
  group_by(Team) %>%
  slice(which.max(Gls)) %>%
  ungroup()

```




```{r}
top_players = top_players %>% arrange(Gls)

ggradar(top_players[c(1,11,20),c(1,6,7,8,9,18,19)],
        grid.min = 0,
        grid.mid=0.75,
        grid.max = 1.5, 
        plot.title = "Amazing MVP Seasons",
        base.size= 1,
        font.radar = "mono")
```




# Total goals of each team

```{r}
ggplot(df_team) + 
    geom_col(aes(x=Team , y= Gls, fill = Team)) + 
    geom_text(aes(x=Team , y= Gls, label= Gls), vjust=0, size = 3) +
    labs(x = "Team", y = "Number of Goals",  
         title = 'Total number of goals for each team') + 
    theme_bw() +
    theme(legend.position = 'none',
         axis.text.x = element_text( angle = 45, hjust=1),
         )
```






